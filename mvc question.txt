http://jobsearch.about.com/od/morejobletters/a/jobappletter.htm

FirstOrDefault() 
SingleOrDefault()
http://stackoverflow.com/questions/7663213/in-linq-whats-the-difference-between-firstordefault-and-singleordefault
http://www.technicaloverload.com/linq-single-vs-singleordefault-vs-first-vs-firstordefault/

which is faster
	FirstOrDefault, only one row is retrieved from the database so it performs slightly better then SingleOrDefault
	SingleOrDefault enumerates the entire collection to ensure the item occurs exactly once

	iterate the collection until they find the first match. While SingleOrDefault iterate the whole collection to find one single match.

iqueriable vs iEnumrearable
http://stackoverflow.com/questions/2433306/whats-the-difference-between-iqueryable-and-ienumerable
http://rkandhal.com/09/06/ienumerable-vs-icollection-vs-iqueryable-vs-ilist/
http://www.codeproject.com/Articles/732425/IEnumerable-Vs-IQueryable

--diff http post and http get
	http get
		Data is visible to the user as it posts as query string.
		It is not secure but fast and quick.
		It use Stack method for passing form variable.
		Data is limited to max length of query string.
		It is good when you want user to bookmark page.
	http post
		Data is submitted in http request body.
		Data is not visible in the url.
		It is more secured but slower as compared to GET.
		It use heap method for passing form variable
		It can post unlimited form variables.
		It is advisable for sending critical data which should not visible to users.

--diff varchar and nvarchar
	An nvarchar column can store any Unicode data
	
--webform vs mvc
	http://www.codeproject.com/Articles/528117/WebForms-vs-MVC
	
	difference between ASP.NET (stateful) and ASP.NET-MVC (stateless) can be isolated 
	to the fact that the first provides server-side controls and the other do not.

	In ASP.NET MVC, Views and logic are kept separately.
	In ASP.NET Web Form, Web Forms (ASPX) i.e. views are tightly coupled to Code behind (ASPX.CS) i.e. logic.

	Bandwidth is more as client side state management options like Cookies, QueryStrings (URL), Hidden fields,
	View State and Control state involve in each roundtrip(as value posted to server)

	Web Forms supports Rich server controls.
	ASP.NET server control detects the browser and generates appropriate html and if required JavaScript also
	Rapid application development 

	Separation of concern : MVC design pattern divides the ASP.NET MVC application into three main aspects
	TDD
	Full control over application behaviour - MVC framework doesn’t use View State or server based forms like Web Forms.
	ASP.NET features are supported
		such as the providers architecture, authentication and authorization scenarios, membership and roles, caching, session and more.
	URL routing mechanism
		This mechanism helps to the application to be more addressable from the eyes of search engines and clients and can help in search engine optimization.


--RESTful services  vs restless

--mvc flows
	user make request
	Routing engine determine which request will be handled by which controller.
	Controller if required talk to model for data.
	Model operates on database (or on some other data sources) and return data (in form of business objects) to controller.
	Controller chooses the appropriate view (like say Customer view which will may contain some html tables, drop downs, textboxes…).
	Controller passes the data (model data retrieved in step 4) to chosen view(in step 5), where data will be populated as per convenience.
	Controller sends back view to the user.
	

--soap
	 SOAP means sending SOAP messages using HTTP. The SOAP messages have a pre-defined standard.
	 SOAP format is a kind of xml format.
	--Soap
		SOAP stands for Simple Object Access Protocol
		It is an XML based protocol built on the top of HTTP or sometimes TCP/IP, SMTP.
		SOAP enforces message format as XML.
		The SOAP message consists of an envelope which includes SOAP headers and body to store the actual information you want to send.
		Performance is slow as compared to REST.

	--rest
		REST stands for REpresentational State Transfer.
		REST is not a protocol but it is an architectural style i.e. resource-based architecture.
		REST does not enforces message format as XML or JSON.
		REST uses the HTTP build-in headers and use the GET, POST, PUT and DELETE verbs to perform CRUD operations
		REST is fast as compared to SOAP.

		REST is a set of principles that define how Web standards, such as HTTP and URIs, are supposed to be used. 
		Cacheable - Clients should be able to cache the responses for further use.


--abstract class and interface
	
	http://www.c-sharpcorner.com/uploadfile/prasoonk/abstract-class-vs-interface/
	http://www.codeproject.com/Articles/11155/Abstract-Class-versus-Interface
	http://www.codeproject.com/Articles/6118/All-about-abstract-classes

	Abstract cannot be instantiated but we can inherit. Interface it cannot be inherit it can be instantiate	

	abstract class can not be sealed class
	abstract method cannot be private.
	Abstract and Interfaces can’t be instantiated directly.
	
	A class can implement any number of interfaces but a subclass can at most use only one abstract class.
	An abstract class can have non-abstract Methods(concrete methods) while in case of Interface all the methods has to be abstract.
	An abstract class can declare or use any variables while an interface is not allowed to do so.
	An abstract class can have constructor 
	all the members of interface are implicitly public.

	abstract class Can provide default behavior
		public abstract class Employee
			{
			public virutal String CalculateSalary()
				{
					//Can provide default behavior
				}
 			}
	An inheritance between abstract to abstract classes is possible.
	We don't need to implement abstract methods of the base abstract class into a derived abstract class. We can implement it later in concrete classes. 
	abstract class absClassA   
    	{   
        //Abstract Method   
        public abstract void SomeMethod();   
   	 }   
  
    	abstract class absClassB: absClassA //Abstract to Abstract Inheritance   
    	{   
   	 }   
	
	The interface can't do anything. It's just a pattern
	
	if we add a new method to an Interface then we have to track down all the implementations of the interface 
	and define implementation for the new method. But if we add a new method to an abstract class then we 
	have the option of providing default implementation and therefore all the existing code might work properly.

	abstract class over interface
		http://www.codeproject.com/Articles/258173/Interfaces-Vs-Abstract-Classes

	

--when to use abbstract class?
	http://www.codeproject.com/Questions/382073/Where-to-Use-Abstact-Class-and-Where-to-Use-Interf
	http://www.codeproject.com/Questions/43970/Real-world-examples-of-abstract-classes-and-interf

	Interfaces are great for defining a contract with absolutely no reliance on any implementation and
	abstract base classes are great for providing some default behaviour, 
	meaning the developer doesn't have to spend ages writing the same thing over and over again.

	advantage of using an interface over an abstract class; that is "Multiple Inheritance Support

	EXAmPLE SUPERB
	http://www.c-sharpcorner.com/UploadFile/d0e913/abstract-class-interface-two-villains-of-every-interview/
	http://www.c-sharpcorner.com/UploadFile/d0e913/abstract-class-interface-two-villains-of-every-interview756/

--Mutlipe interface having same method oveloaded in derived
	http://www.c-sharpcorner.com/UploadFile/rohatash/inherit-multiple-interfaces-with-the-same-method-name-in-C-Sharp/

--sealed classes and sealed method
	A sealed class cannot be used as a base class.
	http://stackoverflow.com/questions/4152049/sealed-method-in-c-sharp

--Difference between Virtual and Abstract Methods
	
	abstract == MustOverride (have only defination  no actual code )
	virtual == Overridable (have actual code but says child class use mine functionality or you can overide me and provide ur own functionality)
	
	http://stackoverflow.com/questions/14728761/difference-between-virtual-and-abstract-methods
	http://stackoverflow.com/questions/391483/what-is-the-difference-between-an-abstract-function-and-a-virtual-function

	Virtual methods have an implementation and provide the derived classes with the option of overriding it. Abstract methods do not provide 
	an implementation and forces the derived classes to override the method.Virtual methods have an implementation 
	and provide the derived classes with the option of overriding it. Abstract methods do not provide an implementation and forces the derived classes to override the method.


	public abstract void AbstractMethod(int i);

	public virtual void VirtualMethod(int i)
	{
        // Default implementation which can be overridden by subclasses.
    	}

--partial class	
	defination of one file destributed over differ files and compile as single file	

--overriding and overloading
	http://www.aspdotnet-suresh.com/2013/09/c-sharp-overloading-and-overriding-differences-with-example.html
	
	-  Overloading (Called as Early Binding or Compile Time Polymorphism or static binding)
       	-  Overriding (Called as Late Binding or Run Time Polymorphism or dynamic binding)
       		We can override a method in base class by creating similar function in derived class
       		this can be achieved by using inheritance principle and using “virtual & override” keywords.
	
	-  Overriding (eg)
		class Base {
   			public virtual void Test() { ... }
		}
		class Subclass1 : Base {
   			public override void Test() { ... }
		}


--function and procedure
	http://stackoverflow.com/questions/771949/what-is-the-difference-between-function-and-procedure-in-pl-sql
	= http://www.dotnet-tricks.com/Tutorial/sqlserver/7EDL150912-Difference-between-Stored-Procedure-and-Function-in-SQL-Server.html

Basic Difference
Function must return a value but in Stored Procedure it is optional( Procedure can return zero or n values).
Functions can have only input parameters for it whereas Procedures can have input/output parameters .
Functions can be called from Procedure whereas Procedures cannot be called from Function.
Advance Difference
Procedure allows SELECT as well as DML(INSERT/UPDATE/DELETE) statement in it whereas Function allows only SELECT statement in it.
Procedures can not be utilized in a SELECT statement whereas Function can be embedded in a SELECT statement.
Stored Procedures cannot be used in the SQL statements anywhere in the WHERE/HAVING/SELECT section whereas Function can be.
The most important feature of stored procedures over function is to retention and reuse the execution plan while in case of function it will be compiled every time.
Functions that return tables can be treated as another rowset. This can be used in JOINs with other tables.
Inline Function can be though of as views that take parameters and can be used in JOINs and other Rowset operations.
Exception can be handled by try-catch block in a Procedure whereas try-catch block cannot be used in a Function.
We can go for Transaction Management in Procedure whereas we can't go in Function.


--inline function
	inline functions are parameterized views. By nature Views do not accept parameters in the search conditions.

--mvc2 vs mvc3
	http://onlydifferencefaqs.blogspot.in/2012/09/difference-between-mvc-2-and-mvc-3-in.html

	mvc2
		Strongly typed HTML helpers means lambda expression based Html Helpers
		Support for DataAnnotations
		Areas for partitioning
		Asynchronous controllers
	
	mvc3
		support for Both Master Page (.master) and Layout Page (_Layout.cshtml)  
			http://forums.asp.net/t/1959864.aspx?Difference+between+Layout+page+and+Master+Page+
		razor introduce
		ViewBag introduce
		Use of NuGet
		Output Caching
		Better JavaScript support with unobtrusive JavaScript, jQuery Validation, and JSON binding
	
	session
		set session variable at session_start in method in global.asax.cs.You should not set session variables in Application_Start(), 
		as that method is only called once
		if you want to do something after session expired then write line of code within Session_End method in Global.asax.cs as below
	
	ViewData vs ViewBag vs TempData vs Session
		http://www.dotnet-tricks.com/Tutorial/mvc/9KHW190712-ViewData-vs-ViewBag-vs-TempData-vs-Session.html

	interview Question
		http://www.codeproject.com/Articles/556995/MVC-interview-questions-with-answers

--Route constraint	
	Route Constraints allow us to apply a regular expression to a URL segment to restrict whether the route will match the request
	http://www.itorian.com/2013/10/route-constraints-in-mvc.html

--type of action result
	http://mvc4beginner.com/Tutorial/Action-Result-Return-Type.html

--razor vs aspx
	http://www.dotnet-tricks.com/Tutorial/mvc/91JM151212-Difference-Between-Razor-View-Engine-and-ASPX-View-Engine.html
	razor
		--it is slow as compare aspx view
		--simple easy to understand and reduce typing
		--By default, Razor Engine prevents XSS attacks(Cross-Site Scripting Attacks)
		  it encodes the script or html tags like <,> before rendering to view.
		--Razor Engine support TDD (Test Driven Development) 

--bundles
	http://www.codeproject.com/Tips/389545/ASP-NET-MVC-Bundling-and-Minification

--readonly vs constant vs static 
	  
	
	Constant and ReadOnly keyword are used to make a field constant which value cannot be modified.
	By default constant are static, hence you cannot define a constant type as static.
	
	The static keyword is used to specify a static member, which means static members are common to all the objects and they do not tied to a specific object
	
	Constant value must be assigned at the time of declaration (compile time)
	Readonly value can be initialized either at the time of declaration or with in the constructor of same class (runtime)
	
	static 
		static data member
			A static member belongs to the class rather than to the objects of the class.
			You can't use this keyword with static
		static constructor
			Static constructor can't be parameterized
			Static Constructor is used to initialize static data members of the class.
		Static Properties
			Static properties are used to get or set the value of static data members of a class.
		static method
			Static methods only use static data members to perform calculation or processing.
			called with the class name 

--c# get set properties
	Properties are a way to control access to your private members
	Properties have many uses: they can validate data before allowing a change;
	 they can transparently expose data on a class where that data is actually retrieved from some other source, 
	such as a database; they can take an action when data is changed, such as raising an event, 
	or changing the value of other fields.

--use of properties
	http://stackoverflow.com/questions/1523548/why-we-need-properties-in-c-sharp
	validate data before allowing a change
	take an action when data is changed, such as raising an event,or changing the value of other fields
		

Types of trigger

	trigger is a special kind of a store procedure that executes in response to certain action
	
	--After Triggers (For Triggers)
		
		CREATE TRIGGER trgAfterInsert ON [dbo].[Employee_Test] 
		FOR INSERT/UPDATE/DELETE
		AS
		begin
		end
	
	--Instead of trigger
		CREATE TRIGGER trgAfterInsert ON [dbo].[Employee_Test] 
		insted of INSERT/UPDATE/DELETE
		AS
		begin
			if(sal>100)
				rollback;
			else
				commmit;
		end
	
--struck, classes and enumrator

http://stackoverflow.com/questions/12505666/crm-2011-server-side-paging-data-parallelism-using-linq-provider


--value type vs reference type
	http://geekswithblogs.net/BlackRabbitCoder/archive/2010/07/29/c-fundamentals-the-differences-between-struct-and-class.aspx

	Value types may be created on the stack or heap as appropriate - typically parameters and locals are created on the stack, 
	members of an enclosing class are typically on the heap.
	
	Value types cannot be null - default value of members that are primitive is zero, 
	default value of members that are a struct is an instance with all struct members defaulted.

	Value type assignments copy all members the whole value - 
	this copies all members of one value to another making two complete instances.
	
	Value types passed by parameter or returned from methods/properties copy whole value - 
	this behavior is the same as value assignment.

	Value types are destroyed when they pass out of scope - 
	local variables and parameters are typically cleaned up when scope is exited, 
	members of an enclosing type are cleaned up when the enclosing type is cleaned up.


	Reference types are generally on the heap - it’s always possible compiler may optimize, 
	but in general you should always think of them as heap objects

	Reference types can be null - default value of members that are reference types members is null.

	Reference type assignment only copies the reference - this decrements/increments reference counts as appropriate.
	
	Reference types passed by parameter or returned from methods/properties pass a reference - the reference is copied, 
	but both references refer to the same original object.
	
	Reference types are only destroyed when garbage collected - after all references to the object are determined to be unreachable.

--MS-SQL Server 2005,2008

--Authentication attribute
	http://codereview.stackexchange.com/questions/7234/mvc-custom-authentication-authorization-and-roles-implementation
	
	Authentication is the process of verifying the identity of a user by obtaining some sort of credentials 

	Windows Authentication 
	Forms Authentication 
	Passport Authentication 

	<system.web><authentication mode="[Windows|Forms|Passport|None]" >

	Authorization is the process of allowing an authenticated users to access 
	the resources by checking whether the user has access rights to the system
	<authorization>
		<allow roles="Administrators" />
		<deny users="*" />
	</authorization>	

--Attributes in DAtaAnnotation
	--Bind attributes
		[bind(Exclude="CouponCode")] attribute will exclude an "CouponCode" property from being posted to server

--output cache attribute
	understanding
	--http://www.dotnet-tricks.com/Tutorial/mvc/4R5c050113-Understanding-Caching-in-Asp.Net-MVC-with-example.html

	cache location abd varybyparam properties
	--


--What are attributes and filters in mvc

	http://www.codeproject.com/Articles/577776/Filters-and-Attributes-in-ASPNET-MVC
	
	MVC provides a very clean way of injecting the pre-processing and post-processing logic for actions and controllers.
	We can put the pre-processing and post-processing logic is by decorating the actions with attributes
	which will invoke an attribute class implementing the filter's logic.

	types of filter
		Authorization filter
		Action filter
		Result filter
		Exception filter

	Configuring Filters

		Global level
			protected void Application_Start()
			{
 			FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);
			}
		Controller level
			[Authorize(Roles="Admin")]
			public class AdminController : Controller

		Action level
			[Authorize(Users="User1,User2")]
 			public ActionResult LinkLogin(string provider)


--Diff betwn Html.Action() or Html.RenderAction()
	The difference between the two is that 
	Html.RenderAction will render the result directly to the Response
	(which is more efficient if the action returns a large amount of HTML) 
	whereas Html.Action returns a string with the result.
	This method result can be stored in a variable, since it returns string type value.

--Diff betwn Html.Partial() or Html.RenderPartial()
	same for partial
	
	eg
	public static MvcHtmlString Partial(this HtmlHelper htmlHelper, string partialViewName, object model, ViewDataDictionary viewData)
	{
    	return mvcHtmlString; //encoded string
	}

	public static void RenderPartial(this HtmlHelper htmlHelper, string partialViewName)
	{
    	htmlHelper.RenderPartialInternal(partialViewName, htmlHelper.ViewData, null, htmlHelper.ViewContext.Writer, ViewEngines.Engines);
	}
	
--Partial And Action
	Partial :Simple to use and no need to create any child action.
		Html.Partial("_Comments")
	action: we need to create a child action for the rendering the partial view.
		@{Html.Action("Category","Home");} 

	renderPartial and renderAction
		here result will directly written to the HTTP response stream 
	
	Partial and Action
		here result can be stored in a variable, since it returns string type value.


--RenderPartial vs RenderAction vs Partial vs Action
	http://www.dotnet-tricks.com/Tutorial/mvc/Q8V2130113-RenderPartial-vs-RenderAction-vs-Partial-vs-Action-in-MVC-Razor.html
	
	result will be directly written to the HTTP response stream
	
--cast vs conversion vs parse
	Casting: Telling the compiler that an object is really something else without changing it (though some data loss may be incurred).

		object obj_s= "12345";
		string str_i = (string) obj; // "12345" as string, explicit
		Boxing and Unboxing

	Parsing: Telling the program to interpret (on runtime) a string.

		string int_s = "12345";
		int i = int.Parse(int_s); // 12345 as int

	Converting: Telling the program to use built in methods to try to change type for what may be not simply interchangeable.

--Boxing / Unboxing
	Implicit conversion of a value type (int, char etc.) to a reference type (object), is known as Boxing. 
	Explicit conversion of same reference type (which is being created by boxing process); back to a value type is known as unboxing

--git vs svn
	http://mrbool.com/differences-between-git-and-svn/30636
	http://agile.dzone.com/articles/version-control-git-vs-svn
	https://git.wiki.kernel.org/index.php/GitSvnComparsion

	svn
		SVN has one central repository,

		SVN if the central repository goes down or the code has broken the build 
		then no other developers can commit there code until the repository is fixed.
		
		SVN if your working without an internet connection 
		you have lost all the features of version control. 

	git
		GIT has multiple repositories,
		one central repository but each developer has their own repository.		

		benefit of having a local repository is that it is quick,
		there is no network traffic needed to commit code into source control

		Git's repository and working directory sizes are extremely small when compared to SVN.

--web api in mvc
	-- see point at http://www.codeproject.com/Articles/556995/MVC-interview-questions-with-answers#How_to_implement_Ajax_in_MVC
	--Output of WebAPI are simple string messages, JSON, simple XML format

-- enable data annotation validation on client side
	--1) 	<script src="<%= Url.Content("~/Scripts/jquery.validate.js") %>" type="text/javascript"></script>
		<script src="<%= Url.Content("~/Scripts/jquery.validate.unobtrusive.js") %>" type="text/javascript">
	--2)	<% Html.EnableClientValidation(); %>


--session state management in .net 

--Client side State management
	cookies
	query string
	view state
	hidden field

--Server Side State management:  http://www.c-sharpcorner.com/UploadFile/freelance91/ASPNETstatemanagementtechniques01012007212655PM/ASPNETstatemanagementtechniques.aspx
	Application object
		Application object is used to store data which is visible 
		across entire application and shared across multiple user sessions
		like connection strung
	
	Session object:

		--Session state can be configured using the <session State> section in the application's web.config file. 
		--<sessionState mode = <"inproc" | "sqlserver" | "stateserver">
 		   cookieless = <"true" | "false">  
		--Default session timeout value is 20 
	

	In-Proc.
		In-Proc session handling then all the session information will be stored in the server memory.(w3wp.exe which is is a ISS Application Pool Process/worker process ) 
		This is the default session state in ASP.NET.
	
	StateServer.
 		session data will be stored in a separate computer(server) and the session data will be handled by a windows service.
		Session state is held in a process called aspnet_state.exe
	
	SQLServer.
		session data will be stored in the SqlServer.
		The benefit of having this scenario is that the data is stored in a centralized database rather than the server memory.
		SQL based Session state is configured with aspnet_regsql.exe
	
--use of worker process in iis
	Worker Process: 
	Worker Process (w3wp.exe) runs the ASP.Net application in IIS. 

	This process is responsible to manage all the request and response that are coming from client system. 
	All the ASP.Net functionality runs under the scope of worker process. 
	When a request comes to the server from a client worker process is responsible to generate the request and response. 
	In a single word we can say worker process is the heart of ASP.NET Web Application which runs on IIS. 

	ADV of HAVing TO MANY  WORKER PROCESS
	If you're using in-process caching of any kind, including in-process session state, 
	it can't be shared between the worker processes.  Having multiple worker processes is similar to have multiple load-balanced servers, 
	and is useful for similar reasons: in case one worker fails, the others can pick up the load.

	http://forums.asp.net/t/1447626.aspx?maximum+number+of+worker+processes

--use of idle time in iis


--for performanc refer book "Ultra-Fast ASP.NET: Build Ultra-Fast and Ultra-Scalable web sites using ASP.NET and SQL Server"

--Asp.Net Web API VS Asp.Net MVC
	http://www.dotnet-tricks.com/Tutorial/webapi/Y95G050413-Difference-between-ASP.NET-MVC-and-ASP.NET-Web-API.html
	
	Asp.Net MVC is used to create web applications that returns both views and data
	but Asp.Net Web API is used to create full blown HTTP services with easy and simple way that returns only data not view.

	In Web API the request are mapped to the actions based on HTTP verbs but in MVC it is mapped to actions name.
	
	Web API helps to build REST-ful services 

--mvc3 vs mvc4
	http://www.slideshare.net/umarali1981/difference-between-aspnet-mvc-3-and-aspnet-mvc-4	
	mvc4
		--Bundle and manificate
		--its is possible to provide authentication using popular site twiter facebook
		  (by using OpenDotNetAuth library availbalein mvc4)
		--Mobile project templates is available in mvc4
		--we can place controller to custom location in mvc4 but in mvc3 2 controller is alway place inside controller folder
		--Asynchronous(in parallel) Controller is difference
		--webapi feature availble in mv4
		--appstart folder 

--Asynchronous(in parallel) Controller
	http://www.codeproject.com/Tips/526099/Asynchronous-Controller-in-ASP-NET-MVC

--jquery means
	it is a fast and concise JavaScript Library that simplifies HTML document traversing, 
	event handling, animating, and Ajax interactions for rapid web development".
	
--jquery to hide all div by class name
	$('.hide').hide();

	show first div
	$('.hide').eq(0).show();

--ajax
	$.ajax({
  		url: o.url,
  		type: 'post',
  		contentType: "application/x-www-form-urlencoded",
  		data: '{"method":"getStates", "program":"EXPLORE"}',
  		success: function (data, status) {
  		  	console.log("Success!!");
  		  	console.log(data);
  		  	console.log(status);
  			},
  		error: function (xhr, desc, err) {
  		  	console.log(xhr);
  		  	console.log("Desc: " + desc + "\nErr:" + err);
  			}
		});

	http://code.tutsplus.com/tutorials/5-ways-to-make-ajax-calls-with-jquery--net-6289

--difference arraylist and array
	array
		Array are strongly type collection and allow to store fixed length.

	arraylist
		Array lists are not strongly type collection. 
		It will store values of different datatypes or same datatype. 
		Array list size will increase or decrease dynamically it can take any size of values from any data type

--arraylist and list
	casting required in arraylist

--difference between for and foreach
	If you are iterating through a collection of items, and do not care about the index values
	then foreach is more convenient, easier to write and safer: you can't get the number of items wrong.
	You do not need to specify the loop bounds minimum or maximum.

	Example
		http://www.onlinebuff.com/article_difference-between-for-loop-and-for-each-loop-in-csharp_1.html

--use of var in c#
	-Var is an implicit type.Implicit means indirect way of defining variable types.
	-by looking into left hand side right side datatype is deine.
	-it is determine at compile time
	-var isn't a type. The actual type is figured out at compile-time.
	-the variable cannot be initialized to null
	

	-make code more readable and understandable.
	-When you are using LINQ and anonymous types “Var” keyword reduces your code for creating special classes.
	example
	class MyData
	{
		public int Len;
		public string Value;
	}
	
	IEnumerable<MyData> obj = from x in Arr where x.Length > 5 select new { Len = x.Length, Value = x };
	var obj = from x in Arr where x.Length > 5 select new { Len = x.Length, Value = x };


	http://www.dotnetfunda.com/articles/show/1567/what-is-the-use-of-var-keyword-in-csharp

--Implicit type var And Anonymous Type var
	http://social.msdn.microsoft.com/Forums/vstudio/en-US/af2d0b6c-f1f3-4007-9f65-4418aa940c82/what-are-implicit-type-var-and-anonymous-types?forum=csharpgeneral

--var vs dynamic VS object	
	http://www.dotnet-tricks.com/Tutorial/csharp/5LQ6210314-Differences-between-Object,-Var-and-Dynamic-type.html	
	var:
	-it is an implicit type but static (types are checked at compile time)
	type of variable declared is decided by the compiler at compile time

	dynamic:
	-it is an implicit type but Dynamic (types are checked at run time)

	where to use? http://www.codeproject.com/Articles/393229/dynamic-type-in-Csharp-Where-and-how-to-use-Ho	
	http://www.codeproject.com/Tips/460614/Difference-between-var-and-dynamic-in-Csharp

	object
	Object is the base class for all derived classes. It provides some methods and capabilities. 
	All derived types can be referenced through the object base type

--var as return type in c#
	


--types of data type
	Implicit types = var
	Explicit types
	http://www.udemy.com/blog/c-sharp-data-types/

--use of linQ over store procedure
	https://www.linkedin.com/groups/Which-is-better-using-LINQ-2366851.S.97395819
	http://stackoverflow.com/questions/14250855/what-are-the-advantages-using-linq-than-stored-procedure
	http://stackoverflow.com/questions/14530/linq-to-sql-vs-stored-procedures

	realistically it depends.. Linq will send a complete query over the network to access the database, 
	where as using sprocs is going to only transmit the relative name of the sproc you want to run. 
	With that said you could say that if you are going to try and transmit a million linq requests 
	over a standard 10/100 network then yes sprocs would be better, but over all it's not going 
	to be enough to notice honestly.

	The better question is what is the end goal? Linq has the advantage of being testable, 
	and gives you the ability to secure it on the controller and view's ends 
	so it allows better security. Also Linq is going to be Type Safe. 
	Ultimately it's personal preference in my estimation.
	
	linq works in both DB server memory and web server memory so its being costly

--use of linQ or Advantage
	http://social.msdn.microsoft.com/Forums/en-US/cd952b8e-4bc6-4be9-87d3-cec7fbe7a0d8/advantages-disadvantages-of-linq?forum=linqtosql
	http://careerride.com/LINQ-defined.aspx
	http://www.c-sharpcorner.com/UploadFile/c5c6e2/using-linq-in-net/
	
	LINQ expressions are Strongly Typed.Linq has the advantage of being testable
	Queries can be dynamically
	Tables are automatically created into class
	Columns are automatically created into properties
	Relationship are automatically appeaded to classes
	Lambda expressions are awesome
	

--linQ and pagination

	int totalCount = from item in _dc.Items
                 where item.Description.
                 Contains(description).Count();

	int numberOfPages = (int)(totalCount/pageSize);
	
	Query:
	from item in _dc.Items
          where item.Description.
          Contains(description).
          Skip((pageIndex - 1) * pageSize).
          Take(pageSize);


--use of lamba expression
	allow code blocks to be written "in-line" where delegate values are expected.
	they provide a very compact and type-safe way to write functions that can be passed as arguments for subsequent evaluation.
	
	http://weblogs.asp.net/scottgu/new-orcas-language-feature-lambda-expressions
	http://www.developer.com/net/csharp/article.php/3598381/The-New-Lambda-Expressions-Feature-in-C-30.htm

--delegates in c#
	Delegate is a type which holds the method(s) reference in an object. 
	It is also referred to as a type safe function pointer.
	
	//create delegate instances
         NumberChanger nc1 = new NumberChanger(AddNum);
         NumberChanger nc2 = new NumberChanger(MultNum);
         //calling the methods using the delegate objects
         nc1(25);
         
	http://www.tutorialspoint.com/csharp/csharp_delegates.htm

--Polymorphism
	
	http://www.onlinebuff.com/article_oops-principle-polymorphism-in-c-with-an-example_17.html
	
--types of inhertence
	http://programcall.com/20/csnet/types-of-inheritance-in-csnet.aspx
	
--string builder
	http://www.codeproject.com/Articles/6771/String-Vs-StringBuilder-C
	
	big perormance issue: the concatenation will create a new string

	string returnNumber = "";
	for(int i = 0; i<1000; i++)
	{ 
  		  returnNumber = returnNumber + i.ToString();
	}

	in the loop we are concatenating the old one with the new to get a string. like assigning 999 new strings

	StringBuilder returnNumber = new StringBuilder(10000);
	for(int i = 0; i<1000; i++)
	{ 
	    returnNumber.Append(i.ToString());
	}

 	In my personal experience, a StringBuilder can be used where more than four or more string concatenations take place
	 must be careful to guess the size of StringBuilder. If the size which we are going to get is more than what is assigned, 
	it must increase the size. This will reduce its performance

	------DIFF---
	Both String and StringBuilder are classes used to handle the strings.

	String are Immutable (Not Modifiable). If you try to modify the string it actually creates a new string and the old 
	string will be then ready for garbage collection.

	StringBuilder when instantiated, creates a new string with predefined capacity and upto that capacity it can 
	accodomate string without needing to create a new memory location for the string....i mean it is mutable and can 
	also grow as and when needed. 	

	When the string needs to be modified frequently, preferably use StringBuilder as its optimized for such situations

--Web api self hosting
	http://www.dotnetcurry.com/showarticle.aspx?ID=896

--whats javascript protocol
	http://crisp.tweakblogs.net/blog/313/the-useless-javascript-pseudo-protocol.html
	http://stackoverflow.com/questions/10068781/what-does-the-javascript-pseudo-protocol-actually-do

-- return false vs preventdefault

--cluster and non-cluster index
	http://www.codeproject.com/Articles/173275/Clustered-and-Non-Clustered-Index-in-SQL
	
	awsm = https://www.youtube.com/watch?v=ITcOiLSfVJQ
	
	primary key generate cluster index
	unique key generate non cluster index
	
	A table has many non clustered indexes
	A table can contain only one clustered indexes
	
	Cluster index generate a binary tree
	while in non cluster index all information are store at leaf node

	When creating the clustered index, SQL server 2005 reads the Studid column and forms a Binary tree on it. 
	This binary tree information is then stored separately in the disc

	Non-Clustered column always depends on the Clustered column on the database

--table valued parameters vs temp table
	http://www.brentozar.com/archive/2014/02/using-sql-servers-table-valued-parameters/
	http://stackoverflow.com/questions/14173715/temporary-tables-and-table-valued-parameters-in-sql-server
	http://www.codeproject.com/Articles/18972/Temporary-Tables-vs-Table-Variables-and-Their-Effe

--delete vs drop in sql server
	Drop table..it will delete complete table from the Database.it can not retrieved bak 
	Delete is used to deleting data from the table.. data can be retrieved using ROLLBAck.

--delete vs truncate
	TRUNCATE
	removes all rows from a table
	The operation cannot be rolled back
	no triggers will be fired
	TRUCATE is faster
	No WHERE clause can be used to only remove some rows
	Delete is DML, Truncate is DDL

--differnce between RANK and DENSE_RANK  function
	http://stackoverflow.com/questions/12739208/how-to-use-rank-in-sql-server

	Dense_rank
	Returns the rank of rows within the partition of a result set, without any gaps in the ranking. 
	
--SQL query to find Nth highest salary from a salary table
	http://stackoverflow.com/questions/3850034/sql-query-to-find-nth-highest-salary-from-a-salary-table
	
	SELECT Salary
	FROM (
    		SELECT row_number() OVER (ORDER BY Salary DESC) as SalaryRank, Salary
    		FROM Salaries
	) as SalaryCTE
	WHERE SalaryRank = @N

	can be achieve by DENSE_RANK() and Rank()

--sql pagination
	SELECT * FROM (
             SELECT ROW_NUMBER() OVER(ORDER BY ID_EXAMPLE) AS NUMBER,
                    ID_EXAMPLE, NM_EXAMPLE, DT_CREATE FROM TB_EXAMPLE
               ) AS TBL
	WHERE NUMBER BETWEEN ((@PageNumber - 1) * @RowspPage + 1) AND (@PageNumber * @RowspPage)
	ORDER BY ID_EXAMPLE

--query to find % contain
	http://www.orafaq.com/faq/how_does_one_escape_special_characters_when_writing_sql_queries
	http://www.techtamasha.com/escape-single-quotes-and-wild-cards-_-in-ms-sql/20

--query to insert '
	http://stackoverflow.com/questions/1586560/how-do-i-escape-a-single-quote-in-sql-server

--group by with select * works
	http://stackoverflow.com/questions/21217778/select-multiple-columns-from-table-but-group-by-one

--linq query
	DataContext context = new DataContext(); 
	var q= context.tblEmployee.GroupBy(ord => ord.Salary) .OrderByDescending(f => f.Key) 
		.Skip(1) //second, third ..nth highest salary where n=1,2...n-1 
		.First() 
		.Select(ord=>ord.Salary)
		.Distinct();

--sql server 2012 
	 --Suppose Employee tables has 500 records
	--Below query skip 200 rows and fetch the next 20 records
	SELECT EmpID, EmpName, Salary FROM dbo.Employee
	ORDER BY EmpID
	OFFSET 200 ROWS
	FETCH NEXT 20 ROWS ONLY 

--diff between RedirectToRoute and RedirectToAction with example


--Concurrency in linq to sql
	http://www.codeproject.com/Articles/38299/How-To-Handle-Concurrency-in-LINQ-to-SQL

-- @helper syntax 
	@helper methods can contain both content and code, and support the full Razor syntax within them
	
--Reusing @helpers across multiple views
	http://weblogs.asp.net/scottgu/asp-net-mvc-3-and-the-helper-syntax-within-razor
	
	The ScottGu.cshtml template in the \App_Code folder above will logically compile down to a class called “ScottGu” 
	with static members of “DisplayPrice” and “AnotherHelper” within it,
	@ScottGu.DisplayPrice(MODEL.PRICE);

*************/
Data Definition Language (DDL) statements are used to define the database structure or schema. Some examples:
CREATE - to create objects in the database
ALTER - alters the structure of the database
DROP - delete objects from the database
TRUNCATE - remove all records from a table, including all spaces allocated for the records are removed
COMMENT - add comments to the data dictionary
RENAME - rename an object
DML

Data Manipulation Language (DML) statements are used for managing data within schema objects. Some examples:
SELECT - retrieve data from the a database
INSERT - insert data into a table
UPDATE - updates existing data within a table
DELETE - deletes all records from a table, the space for the records remain
MERGE - UPSERT operation (insert or update)
CALL - call a PL/SQL or Java subprogram
EXPLAIN PLAN - explain access path to data
LOCK TABLE - control concurrency
DCL

Data Control Language (DCL) statements. Some examples:
GRANT - gives user's access privileges to database
REVOKE - withdraw access privileges given with the GRANT command
TCL

Transaction Control (TCL) statements are used to manage the changes made by DML statements. It allows statements to be grouped together into logical transactions.
COMMIT - save work done
SAVEPOINT - identify a point in a transaction to which you can later roll back
ROLLBACK - restore database to original since the last COMMIT
SET TRANSACTION - Change transaction options like isolation level and what rollback segment to use

DELETE (DML)
The DELETE command is used to remove rows from a table. A WHERE clause can be used to only remove some rows. 
If no WHERE condition is specified, all rows will be removed.
After performing a DELETE operation you need to COMMIT or ROLLBACK the transaction to make the change permanent or to undo it. 
Note that this operation will cause all DELETE triggers on the table to fire.

TRUNCATE
TRUNCATE removes all rows from a table. The operation cannot be rolled back and no triggers will be fired.
As such, TRUCATE is faster and doesn't use as much undo space as a DELETE.

DROP
The DROP command removes a table from the database. All the tables' rows, indexes and privileges will also be removed. No DML triggers will be fired. 
The operation cannot be rolled back.
****************/

*******************/
ASP.NET MVC3

New Project Templates having support for HTML 5 and CSS 3.
Improved Model validation.
Razor View Engine introduced with a bundle of new features.
Having support for Multiple View Engines i.e. Web Forms view engine, Razor or open source. You can follow here for a detailed comparison on difference between WebForm View Engine and Razor View Engine.
Controller improvements like ViewBag dynamic property and ActionResults Types etc. Dynamic property is a new feature introduced in C# 4.0. ViewBag being a dynamic property has an advantage over ViewData that it doesn’t require checking NULL values. For detailed difference between ViewBag and ViewData can be found here.

ASP.NET MVC 4

ASP.NET Web API, a framework that simplifies the creation of HTTP services and serving a wide range of clients. Follow to create your first ASP.NET Web API service.
Adaptive rendering and other look-n-feel improvements to Default Project Templates.
A truly Empty Project Template.
Based on jQuery Mobile, new Mobile Project Template introduced.
Support for adding controller to other project folders also.
Task Support for Asynchronous Controllers.
Controlling Bundling and Minification through web.config.
Support for OAuth and OpenID logins using DotNetOpenAuth library.
Support for Windows Azure SDK 1.6 and new releases.

ASP.NET MVC5

Creating your first ASP.NET MVC 5 Application in 4 simple steps
ASP.NET Identity for authentication and identity management. Thesedays, modern applications are developed for broader range of clients such as web, mobile in mind. Also, users are actively using their social identities from various social channels like facebook, youtube, twitter etc. ASP.NET Identity is a new Membership system to handle authentication and authorization for variety of clients as well as using user’s existing social identities.
Authentication Filters for authenticating user by custom or third-party authentication provider.
With the help of Filter overrides, we can now override filters on a method or controller.
Bootstrap replaced the default MVC template.
Attribute Routing is now integrated into MVC5. Basically, MVC Routing is an excellent way to create human friendly and Search Engine Optimized URLs. You can easily get understanding about Routing in ASP.NET MVC here. Attribute based routing enables us to define routes along with action methods as follows:
  [Route(“Students/{id}”)]
  public ActionResult GetStudentById(string id)
{        
           // code logic here.        
           return View();
}
ASP.NET MVC6 | ASP.NET vNext

Single Programming Model for ASP.NET MVC and ASP.NET Web API.
Optimized for Cloud Computing.
Supporting side by side deployment of runtime and framework along with application.
Out of the box support for dependency injection.
vNext is Open Source and supports running on multiple platforms including Linux and Mac.
New JSON-based project Extension.
In order to dynamically compile code, Roslyn compiler is used.